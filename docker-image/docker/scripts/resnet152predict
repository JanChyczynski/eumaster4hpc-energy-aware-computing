#!/usr/bin/env python3

import logging
import os
import sys
import torch
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image

model = models.resnet152(pretrained=True)
model.eval()

preprocess = transforms.Compose([
    transforms.Resize(2048),
    transforms.ToTensor(),
])


def predict_image(image_path):
    input_image = Image.open(image_path)
    input_tensor = preprocess(input_image)
    input_batch = input_tensor.unsqueeze(0)

    if torch.cuda.is_available():
        input_batch = input_batch.to('cuda')
        model.to('cuda')
    else:
        raise Exception('CUDA not available')

    with torch.no_grad():
        output = model(input_batch)

    _, predicted = output.max(1)
    predicted_class = predicted.item()

    print(f'Predicted class: {predicted_class} for [{image_path}]')


def main():
    directory = sys.argv[1]
    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
    for file in files:
        file = os.path.join(directory, file)
        try:
            predict_image(file)
        except Exception:
            logging.exception(f'Error while predicting {file}')


if __name__ == '__main__':
    main()
